#!/usr/bin/env python3
"""
Converts vim documentation to simple HTML (translated from vim2html.pl)
"""
import sys
import os
import re
from datetime import datetime

# global URL mapping
url = {}

def maplink(tag):
    if tag in url:
        return url[tag]
    else:
        # unknown link target
        safe = tag.replace('.txt', '')
        safe = safe.replace('<', '&lt;').replace('>', '&gt;')
        return f"<code class=\"badlink\">{safe}</code>"


def read_tag_file(tagfile):
    pattern = re.compile(r"^(\S+)\s+(\S+)\s+")
    with open(tagfile, 'r') as f:
        for line in f:
            m = pattern.match(line)
            if not m:
                continue
            tag, file_txt = m.group(1), m.group(2)
            file_html = re.sub(r"\.txt$", ".html", file_txt)
            label = tag.replace('.txt', '')
            href_anchor = esc_url(tag)
            display = esc_text(label)
            url[tag] = f"<a href=\"{file_html}#{href_anchor}\">{display}</a>"


def esc_text(text):
    text = text.replace('&', '&amp;')
    text = text.replace('<', '&lt;')
    text = text.replace('>', '&gt;')
    return text


def esc_url(u):
    # minimal escaping
    replacements = {
        '"': '%22', '~': '%7E', '<': '%3C', '>': '%3E',
        '=': '%20', '#': '%23', '/': '%2F'
    }
    for k, v in replacements.items():
        u = u.replace(k, v)
    return u


def vim2html(infile):
    basename = os.path.basename(infile)
    outfile = re.sub(r"\.txt$", '', basename)
    htmlfile = f"{outfile}.html"

    now = datetime.now()
    date_str = f"{now.day}.{now.month}.{now.year}"

    with open(infile, 'r') as fin, open(htmlfile, 'w') as fout:
        # header
        head = outfile.upper()
        fout.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n")
        fout.write("<html>\n<head>\n")
        fout.write(f"<title>VIM: {outfile}</title>\n")
        fout.write("<link rel=\"stylesheet\" href=\"vim-stylesheet.css\" type=\"text/css\">\n")
        fout.write("</head>\n<body>\n")
        fout.write(f"<h2>{head}</h2>\n<pre>\n")

        inexample = 0
        sep_pattern = re.compile(r"^\s*[-=]+\s*$")
        for line in fin:
            line = line.rstrip('\n')
            if sep_pattern.match(line):
                fout.write("</pre><hr><pre>\n")
                continue

            # examples
            if line == '>' or line.endswith(' >'):
                inexample = 1
                line = line[:-1]
            elif inexample and re.match(r'^([<\S])', line):
                inexample = 0
                if line.startswith('<'):
                    line = line[1:]

            # strip trailing spaces
            line = re.sub(r"\s+$", '', line)

            # token processing
            tokens = re.split(r'((?:\|[^\|]+\|)|(?:\*[^\*]+\*))', line)
            out_tokens = []
            for tok in tokens:
                m1 = re.match(r"^\|([^\|]+)\|", tok)
                m2 = re.match(r"^\*([^\*]+)\*", tok)
                if m1:
                    out_tokens.append(f"|{maplink(m1.group(1))}|")
                    continue
                elif m2:
                    name = m2.group(1)
                    anchor = esc_url(name)
                    text = esc_text(name)
                    out_tokens.append(
                        f"<b class=\"vimtag\">*<a name=\"{anchor}\">{text}</a>*</b>"
                    )
                    continue

                text = esc_text(tok)
                # keystrokes
                text = re.sub(r'CTRL-(\w+)', r'<code class="keystroke">CTRL-\1</code>', text)
                # parameters <...>
                text = re.sub(r'&lt;(.*?)&gt;', r'<code class="special">&lt;\1&gt;</code>', text)
                # parameters {...}
                text = re.sub(r'\{([^}]*)\}', r'<code class="special">{\1}</code>', text)
                # parameters [...]
                text = re.sub(r'\[(range|line|count|offset|cmd|[-+]?num)\]',
                              r'<code class="special">[\1]</code>', text)
                # notes
                text = re.sub(r'(Note:?)', r'<code class="note">\1</code>', text, flags=re.IGNORECASE)
                # local headings
                text = re.sub(r'^(.*)~$', r'<code class="section">\1</code>', text)
                out_tokens.append(text)

            line_out = ''.join(out_tokens)
            if inexample == 2:
                fout.write(f"<code class=\"example\">{line_out}</code>\n")
            else:
                fout.write(line_out + "\n")

            if inexample == 1:
                inexample = 2

        fout.write("</pre>\n")
        fout.write(f"<p><i>Generated by vim2html on {date_str}</i></p>\n")
        fout.write("</body>\n</html>\n")


def write_css():
    css_content = """
body { background-color: white; color: black;}
:link { color: rgb(0,137,139); }
:visited { color: rgb(0,100,100);
           background-color: white; /* should be inherit */ }
:active { color: rgb(0,200,200);
          background-color: white; /* should be inherit */ }

B.vimtag { color : rgb(250,0,250); }

h1, h2 { color: rgb(82,80,82); text-align: center; }
h3, h4, h5, h6 { color: rgb(82,80,82); }
.headline { color: rgb(0,137,139); }
.header { color: rgb(164, 32, 246); }
.section { color: rgb(164, 32, 246); }
.keystroke { color: rgb(106, 89, 205); }
.vim { }
.example { color: rgb(0, 0, 255); }
.option { }
.notvi { }
.special { color: rgb(106, 89, 205); }
.note { color: blue; background-color: yellow; }
.sub {}
.badlink { color: rgb(0,37,39); }
"""
    with open('vim-stylesheet.css', 'w') as css:
        css.write(css_content)


def usage():
    sys.stderr.write("Usage: vim2html.py <tagfile> <textfiles>...\n")
    sys.exit(1)


def main():
    if len(sys.argv) < 3:
        usage()

    tagfile = sys.argv[1]
    print("Processing tags...")
    read_tag_file(tagfile)

    for txt in sys.argv[2:]:
        print(f"Processing {txt}...")
        vim2html(txt)

    print("Writing stylesheet...")
    write_css()
    print("done.")


if __name__ == '__main__':
    main()
